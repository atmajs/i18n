{
  "name": "atma",
  "description": "Atma.Toolkit",
  "preferGlobal": true,
  "author": {
    "name": "Alexander Kit",
    "email": "alex.kit@atmajs.com"
  },
  "version": "0.10.1",
  "bin": {
    "atma": "atma"
  },
  "main": "module.js",
  "dependencies": {
    "uglify-js": "~2.2.2",
    "clean-css": "~0.9.0",
    "jshint": "~0.9.1",
    "coffee-script": ">0.0.0",
    "less": "~1.5.0",
    "yamljs": ">0.0.0",
    "openurl": "~1.1.0",
    "socket.io-client": "~0.9.11",
    "socket.io": "~0.9.16",
    "atma-libs": ">0.0.0",
    "atma-logger": ">0.0.55",
    "atma-io": ">0.0.41",
    "atma-utest": ">0.0.0",
    "atma-server": ">0.0.0",
    "appcfg": ">0.0.0",
    "cheerio": "~0.13.1",
    "connect": "~2.14.2"
  },
  "scripts": {},
  "repository": {
    "type": "git",
    "url": "git://github.com/atmajs/Atma.Toolkit.git"
  },
  "license": "MIT",
  "readme": "\r\n\r\n### Atma.js Toolkit\r\n\r\n\r\n```bash\r\n> npm install atma -g\r\n# ...\r\n> atma --help\r\n```\r\n\r\n```bash\r\n> atma [action] [arg] [...] -KEY VALUE [...]\r\n> atma [*.json | *.js | *.yml]\r\n# Load Config and process\r\n#   .json - JSON\r\n#   .yml - yml\r\n#   .js - JS Module, that exports tasks(s)\r\n```\r\n\r\n### Embedded Actions\r\n\r\n- [Build](#build)\r\n- [Shell](#shell)\r\n- [Run scripts](#custom)\r\n- [HTTP Server](#server)\r\n- [Reference](#reference)\r\n- [Generate](#gen)\r\n\r\n_... some more, just run atma -help_\r\n\r\nTo get help from cli for a particular action run `$ atma actionName -help`\r\n\r\n### Config\r\n\r\nConfiguration object consists from any number of actions/tasks you want to run.\r\n\r\n_Javascript sample_\r\n```javascript\r\n// Single action\r\nmodule.exports = ActionObject;\r\n\r\n// Multiple actions\r\nmodule.exports = [ActionObject, ActionObject, /*..*/];\r\n\r\n// Grouped actions\r\nmodule.exports = {\r\n    groupName: ActionObject, // [ActionObject]\r\n    otherGroup: ActionObject, // [ActionObject]\r\n    \r\n    // optional    \r\n    defaults: ['groupName']\r\n}\r\n\r\n/*\r\n * Normally, if you run `atma config.js` then all grouped actions will be started,\r\n * but if `defaults` property is used, then only that groups will be activated.\r\n * Also you can run any group with: 'atma config.js groupName'\r\n*/\r\n\r\n```\r\n\r\n#### ActionObject\r\n```javascript\r\n{\r\n    action: 'NAME',\r\n    // ... action configuration\r\n}\r\n```\r\n\r\nIf ActionObject is in a group, and that groupname has the name of existed action,\r\nthen you can ommit 'action' property\r\n```javascript\r\nmodule.exports = {\r\n    copy: {\r\n        // action: 'copy' - is not required\r\n\t\tfiles: {\r\n\t\t\t'filePath': 'destinationPath',\r\n            // ...\r\n\t\t}\r\n    }\r\n}\r\n```\r\n\r\n## Actions\r\n\r\n#### build\r\n\r\nApplication Builder for (IncludeJS)[http://atmajs.com/include]\r\n\r\nFeatures:\r\n\r\n- Combine **javascript** into a single file\r\n    - extract all scripts from main HTML file\r\n    - extract all nested scripts included with IncludeJS\r\n    - preprocess javascript if coffeescript or any other supported loader is used\r\n\r\n- Combine **style** into a single file\r\n    - extract all style links from main HTML file\r\n    - extract all nested styles included with IncludeJS\r\n    - copy images or fonts, when located not in a working directory (e.g. are referened)\r\n    - preprocess css if less or any other supported loader is used\r\n\r\n- Combine **templates** into resulted HTML file\r\n    - extract all nested IncludeJS `load`s and embed them into the HTML\r\n\r\n\r\n```javascript\r\n{\r\n    \"action\": \"build\"\r\n    \r\n    // <String> — HTML input file\r\n    \"file\": \"index.dev.html\",\r\n    \r\n    // <Boolean> — run MinifyJS and clean-css\r\n    \"minify\": true,\r\n    \r\n    // <Object> - optional — UglifyJS compressor settings. @default {global_defs: {DEBUG: false}}\r\n    \"uglify\": {} \r\n    \"jshint\" : {\r\n        \"options\" : Object // — JSHINT options\r\n        \"globals\" : Object // — global variables. @default {\"window\": false, \"document\": false}\r\n        \"ignore\"  : Object // — file names to ignore\r\n    }\r\n    \"outputMain\": \"index.html\" // — output name of a built html\r\n    \"outputSources\": \"build/\"  // — directory of combined/copied resources\r\n}\r\n```\r\n\r\n#### project-import\r\n```javascript\r\n{\r\n    action: \"project-import\"\r\n}\r\n```\r\nCopy resources, that are used by current project, from referenced directories in .reference/* to .import directory\r\n\r\n#### project-reference\r\n```javascript\r\n{\r\n    action: \"project-reference\"\r\n}\r\n```\r\nSwitch back from \"project-import\" to resource referencing\r\n\r\n#### shell\r\n```javascript\r\n{\r\n    action: \"shell\",\r\n\r\n    /* Commands: Array or String */\r\n    command:  [\r\n        \"cmd /C copy /B index.html c:/app\",\r\n        \"cmd /C copy /B index.build/ c:/app/index.build\",\r\n        // ... other commands\r\n    ]\r\n\r\n}\r\n```\r\nExecuate shell commands\r\n\r\n#### custom\r\n```javascript\r\n{\r\n    action: \"custom\",\r\n    script: \"scriptPath.js\"\r\n}\r\n```\r\nOr from CLI\r\n\r\n```bash\r\n> atma custom scriptPath\r\n```\r\n\r\nCustom script should export `process(config, done)` function\r\n```javascript\r\n// scriptPath.js\r\n\r\ninclude.exports = {\r\n    process: function(config, done){\r\n        // config is current ActionObject - it can contain additional information\r\n        // for a script\r\n\r\n        // do smth. and call done if ready\r\n        done(/* ?error */);\r\n    }\r\n}\r\n\r\n@IMPORTANT\r\n\r\n/*\r\n    Any require(module) could also be resolved from global npm directory\r\n\r\n    Example, you have installed jQuery globally - > npm install jquery -g\r\n    and you can use it from the script as if it was installed in a directory, where\r\n    scriptPath.js is located.\r\n\r\n    var jquery = require('jquery');\r\n    This is perfect for a cli scripting.\r\n\r\n    Also you can use IncludeJS API here - as io.File:\r\n\r\n    var content = new io.File('someTxt').read();\r\n\r\n    new io.Directory().readFiles('*.txt).files.forEach(function(file){\r\n        var txt = file.read() + '...';\r\n\r\n        new io.File('path').write(txt);\r\n    });\r\n*/\r\n\r\n```\r\n\r\n### HTTP Server\r\n```javascrit\r\n{\r\n    action: 'server',\r\n    port: 5777, // default 5777\r\n    open: 'index.dev.html' // auto open file in browser\r\n}\r\n```\r\n\r\nStart integrated server in a current working directory.\r\n\r\nTo start the server direct from command line, use cli action pattern\r\n\r\n```atma [action] -KEY VALUE```\r\n```bash\r\n> atma server -port 5500\r\n```\r\n\r\n### Reference (Symbolic Links)\r\n\r\n```javascript\r\n{\r\n    \"action\": \"reference\"\r\n    \"path\": directory path || name of a project from globals.txt\r\n    \"name\": reference name /* optional @default directory name*/\r\n}\r\n```\r\n\r\n```bash\r\n> atma reference atmajs\r\n```\r\n\r\nCreates symbolic link in \"%current directory%/.reference\" folder\r\n\r\n\r\n### gen\r\n\r\nScaffolding\r\n\r\n```javascript\r\n{\r\n    action: \"gen\",\r\n    name: \"name\"\r\n}\r\n```\r\n```bash\r\n> atma gen [name]\r\n```\r\n\r\nTemplates:\r\n\r\n- starter - MaskJS/mask.bindings/jmask/mask.compo/IncludeJS/Ruqq/jQuery\r\n- compo - creates component template *.js/*.css/*.mask : ```> atma template compo desiredName\"\r\n- server - create node.js bootstrap project\r\n- todoapp - creates todomvc sample application\r\n\r\n\r\nYou can create any other templates - just put all required files to:\r\n``` %npm-global-directory%/node_modules/atma/template/%YourTemplateName% ```\r\n\r\n### Download Atma Libraries\r\n\r\n```bash\r\n> atma atma-clone\r\n# only primary libraries are cloned from github, to clone all:\r\n> atma atma-clone --all\r\n```\r\n\r\n### Global Projects and default routes:\r\n\r\n```bash\r\n> atma globals\r\n```\r\n\r\nSample:\r\n```yml\r\n\r\nprojects:\r\n    atma: \r\n        path: \"file:///c:/Development/atma/\"\r\n\r\ndefaultRoutes:\r\n    atma_lib: \t\t\"{atma}/{0}/lib/{1}.js\"\r\n    atma_ruqq: \t\t\"{atma}/ruqq/lib/{0}.js\"\r\n    atma_compo: \t\"{atma}/compos/{0}/lib/{1}.js\"\r\n    \r\n```\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/atmajs/Atma.Toolkit/issues"
  },
  "homepage": "https://github.com/atmajs/Atma.Toolkit",
  "_id": "atma@0.10.1",
  "_from": "atma@latest"
}
