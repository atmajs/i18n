{
  "name": "appcfg",
  "version": "0.1.23",
  "description": "Application Configuration Library for Node.js",
  "main": "lib/config.js",
  "scripts": {
    "test": "node_modules/.bin/atma test"
  },
  "keywords": [
    "config",
    "settings"
  ],
  "author": "",
  "license": "MIT",
  "devDependencies": {
    "atma": "latest"
  },
  "dependencies": {
    "atma-io": "latest",
    "atma-libs": "latest",
    "mongodb": "latest"
  },
  "readme": "\r\n\r\n#### Application Configuration Library for Node.js\r\n\r\n_Part of the [Atma.js](http://atmajs.com) Project_\r\n\r\n====\r\n[![Build Status](https://travis-ci.org/atmajs/appcfg.png?branch=master)](https://travis-ci.org/atmajs/appcfg)\r\n\r\n- [About](#about)\r\n- [Api](#api)\r\n\r\n```bash\r\n$ npm install appcfg -save\r\n```\r\n\r\n### About\r\n\r\nLoad and Combine Configuration from many sources:\r\n\r\n- File (JavaScript Module, JSON, Yaml)\r\n- Directory\r\n- MongoDB\r\n\r\nAdditional features:\r\n\r\n- Command Line Overrides _(with dot notations)_: `node app --foo.bar barValue\r\n- Conditions\r\n- Special Folder\r\n- Interpolations\r\n\r\nWhen combining objects from many sources, **deep copy** is used:\r\n\r\n```javascript\r\n// a\r\n{ sub: { foo: 'foo' }, arr: [ 'foo' ] }\r\n// b\r\n{ sub: { bar: 'bar' }, arr: [ 'bar' ] }\r\n\r\n// combined (a + b)\r\n{\r\n    sub: { foo: 'foo', bar: 'bar'},\r\n    arr: ['foo', 'bar']\r\n}\r\n\r\n// E.g you want completely to overwrite `arr` property, then prefix the key's name with `!`\r\n\r\n// a\r\n{ sub: { foo: 'foo' }, arr: [ 'foo' ] }\r\n// b\r\n{ sub: { bar: 'bar' }, '!arr': [ 'bar' ] }\r\n\r\n// combined (a + b)\r\n{\r\n    sub: { foo: 'foo', bar: 'bar'},\r\n    arr: ['bar']\r\n}\r\n```\r\n\r\nSample:\r\n\r\n```javascript\r\n\tvar config = Config\r\n\t\t.fetch([\r\n\t\t\t// from file. (with Special Folder format syntax support)\r\n\t\t\t{\r\n\t\t\t\tpath: '%APPDATA%/.appName/config.yml',\r\n\t\t\t\t\r\n\t\t\t\t// set this source as writable for configuration persistance\r\n\t\t\t\twritable: true\r\n\t\t\t},\r\n\t\t\t// directory\r\n\t\t\t{\r\n\t\t\t\tpath: 'defaults/**.yml'\r\n\t\t\t},\r\n\t\t\t// mongodb\r\n\t\t\t{\r\n\t\t\t\tmongo: 'barSettings'\r\n\t\t\t},\r\n\t\t\t// from file, but use only nested property\r\n\t\t\t{\r\n\t\t\t\tpath: 'package.json',\r\n\t\t\t\tgetterProperty: 'atma'\r\n\t\t\t}\r\n\t\t])\r\n\t\t.done(function(){\r\n\t\t\t\r\n\t\t\tthis === config // > true\r\n\t\t})\r\n```\r\n\r\nYaml conditions sample:\r\n\r\n```yml\r\n\r\nport: \r\n\t'#if debug': 5000\r\n\t'#if test': 5030\r\n\t'default': 8080\r\n\r\n'#if debug':\r\n\tenv: 'DEBUG'\r\n\r\nscipts:\r\n\t- lib.js\r\n\t- '#if debug'\r\n\t\t- lib.debug-extension.js\r\n\t\r\n```\r\n\r\nAnd if `debug` property in configuration or over cli (`node app --debug`) is set to `true` this source results to:\r\n\r\n```javascript\r\n{\r\n\tport: 5000,\r\n\tenv: \"DEBUG\",\r\n\tscripts: [\r\n\t\t\"lib.js\",\r\n\t\t\"lib.debug-extension.js\"\r\n\t]\r\n}\r\n```\r\n\r\n### API\r\n\r\n#### Config\r\n\r\n** static **\r\n##### `.fetch(Array<Source>)` => Config Instance\r\nStart loading the configuration from specified sources, returns new deferrable configuration instance\r\n\r\n** methods **\r\n\r\n##### `<Constructor> (Array<Source>)`\r\n\r\n##### `.$read(?Mix)`\r\n- Mix:\r\n\t- String: File/Directory/Glob path\r\n\t- Source: Source object\r\n\t- Array<Source>\r\n\t- `@default` - Array<Source> taken from constructor\r\nStart loading configuration from sources\r\n\r\n##### `.$write(config)`\r\nUpdate and save the configuration. Use first matched writable source.\r\n\r\n##### `.done(callback)`\r\nFire the callback when the configuration ends loading or reading\r\n\r\n#### Source\r\n\r\n##### Common properties for all source types\r\n```javascript\r\n{\r\n    // Define specific property to extract SUB-JSON from the loaded configuration\r\n\t// @default: null\r\n\tgetterProperty: String\r\n\t\r\n\t// Define specific property in the root configuration,\r\n\t// where the loaded configuration should be inserted into\r\n\t// @default: null\r\n\tsetterProperty: String\r\n\t\r\n\t// Specify if this source can be used for persistence\r\n\t// @default: false\r\n\twritable: Boolean\r\n\t\r\n\t// Fires before source $read function is called\r\n\t// (e.g. change this.path property or any other things)\r\n\tbeforeRead: Function<Source, RootConfig>\r\n\t\r\n\t// Fires after source completes reading\r\n\t// (e.g. access config object in `Source.config`)\r\n\tafterRead: Function<Source, RootConfig>\r\n    \r\n    // If true, do not log any warning if the source returns 404\r\n    // @default: false\r\n    optional: true\r\n    \r\n    // If true, then waits until all previous sources are loaded\r\n    // @default: false\r\n    sync: true\r\n}\r\n```\r\n\r\n\r\n##### FileSource\r\n```javascript\r\n{\r\n\t// File path\r\n\tpath: String\r\n}\r\n```\r\n\r\n##### DirectorySource\r\nIt will be mapped to multiple FileSources\r\n```javascript\r\n{\r\n\t// Directory path with GLOB look-up, e.g. 'configs/**.json'\r\n\tpath: String\r\n}\r\n```\r\n\r\n##### MongoDBSource\r\n_**Depends on ClassJS**_\r\n```javascript\r\n{\r\n\t// Collection name\r\n\tmongo: String,\r\n\t\r\n\t// if source is writable\r\n\t// @default: true\r\n\twritable: Boolean\r\n\t\r\n\t// MongoDB Connection Settings\r\n\t// It can be also specified in previous configuration source, under `mongodb` property\r\n\t// @default: null - \r\n\tsettings: {\r\n\t\t// connection string\r\n\t\tconnection: String\r\n\t\t// or\r\n\t\t\r\n\t\t// Port, default 27017\r\n\t\tport: Number,\r\n\t\t// IP, default '127.0.0.1'\r\n\t\tip: String,\r\n\t\t\r\n\t\t// Database name, no default\r\n\t\tdb: String\r\n\t}\r\n}\r\n```\r\n\r\n##### CustomSource\r\nThis source type can suit any needs.\r\n\r\n```javascript\r\n\r\n// Constructor with the Deferrable Interface and the method `read`\r\nFunction \r\n\r\n// e.g. using ClassJS\r\n\r\nClass({\r\n\tBase: Class.Deferred,\r\n\tread: function(){\r\n\t\t// do any reads and calcs, after that resolve the source\r\n\t\tthis.config = fooConfig();\r\n\t\tthis.resolve();\r\n\t}\r\n})\r\n\r\n```\r\n\r\n##### Embedded\r\nInclude config direct into the source\r\n```javascript\r\n{\r\n    config: Object\r\n}\r\n```\r\n\r\n----\r\nThe MIT License",
  "readmeFilename": "readme.md",
  "_id": "appcfg@0.1.23",
  "_from": "appcfg@>0.0.0"
}
