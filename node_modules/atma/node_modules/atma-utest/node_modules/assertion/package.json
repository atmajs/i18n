{
  "name": "assertion",
  "version": "0.100.5",
  "description": "Assertion Library",
  "main": "lib/assert.min.js",
  "scripts": {
    "test": "node_modules/.bin/atma test"
  },
  "keywords": [
    "assert",
    "assertions",
    "test",
    "TDD",
    "unit test"
  ],
  "author": {
    "name": "Alexander Kit"
  },
  "license": "MIT",
  "devDependencies": {
    "atma": "latest"
  },
  "readme": "Assertion Library for Browsers and NodeJS\r\n----\r\n[![Build Status](https://travis-ci.org/atmajs/assertion.png?branch=master)](https://travis-ci.org/atmajs/assertion)\r\n\r\nBased on NodeJS [Assert](http://nodejs.org/api/assert.html) module. And is part of the [uTest](https://github.com/atmajs/utest) Library.\r\n\r\n_As a standalone module can be found in NPM repository_\r\n```bash\r\nnpm install assertion\r\n```\r\n\r\n##### API\r\n\r\n###### NodeJS API\r\n\r\n- [Assert Documentation](http://nodejs.org/api/assert.html)\r\n\r\n###### Additional API\r\n\r\n- `has / hasNot`\r\n\r\n\t**Subset matching**\r\n\t```javascript\r\n\t// Substring search\r\n\tassert.has(String, String | RegExp, ?message);\r\n\t\r\n\t// Simple property existence check\r\n\tassert.has(Object, String);\r\n\t\r\n\t// Sub-object match\r\n\tassert.has(Object, Object);\r\n\t\r\n\t// Check if item exists in set\r\n\tassert.has(Array, Primitive);\r\n\t\r\n\t// Subset match\r\n\tassert.has(Array, Array);\r\n\t```\r\n\t\r\n\t> When checking arrays or objects, deep matching is performed. See [tests](https://github.com/atmajs/assertion/blob/master/test/has.test)\r\n\t\r\n\t```javascript\r\n\t\r\n\tassert.has({\r\n\t\tfoo: 'foo',\r\n\t\tbar: {\r\n\t\t\tqux: {\r\n\t\t\t\tqux: 'qux'\r\n\t\t\t\tquux: 'quux'\r\n\t\t\t},\r\n\t\t\tbaz: [1, 2, 3]\r\n\t\t}\r\n\t}, {\r\n\t\tfoo: null,\r\n\t\tbar: {\r\n\t\t\tbaz: [1],\r\n\t\t\tqux: {\r\n\t\t\t\tqux: 'qux'\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\t\r\n\t```\r\n\r\n- `is/isNot`\r\n\r\n\t**Type check**\r\n\t```javascript\r\n\t\t// Check by Typename\r\n\t\tassert.is(Any, String, ?message)\r\n\t\t\r\n\t\t// Check by Contructor (instanceof)\r\n\t\tassert.is(Any, Function);\r\n\t```\r\n\tTypename is extracted from `Object.prototype.toString.call`, so these are:\r\n\t```javascript\r\n\t\t'String'\r\n\t\t'Number'\r\n\t\t'Null'\r\n\t\t'Undefined'\r\n\t\t'Function'\r\n\t\t'RegExp'\r\n\t\t'Date'\r\n\t\t'Object' // any `object` will pass here\r\n\t\t'HTML**' // DOM Node, e.g. HTMLBodyElement\r\n\t\t'CustomEvent'\r\n\t\t...\r\n\t\tall other built-in types\r\n\t```\r\n\r\n- jQuery\r\n\r\n\t**jQuery Assertion Extensions**\r\n\t```javascript\r\n\t\t$.fn.eq_\r\n\t\t$.fn.notEq_\r\n\t\t$.fn.deepEq_\r\n\t\t$.fn.notDeepEq_\r\n\t\t$.fn.has_\r\n\t\t$.fn.hasNot_\r\n\t```\r\n\tFunctions API:\r\n\t- Get Property\r\n\t\t- ``` (Key, Expected) ```\r\n\t\t- ``` ([Key, Expected], message) ```\r\n\t- Function call\r\n\t\t- ``` (FnName [, ...arguments], Expected) ```\r\n\t\t- ``` ([FnName [, ...arguments], Expected], message) ```\r\n\t\r\n\t**`has/hasNot`** \r\n\t- Node Find/Filter Assertions\r\n\t\t- ``` (Selector, ?ExpectedCount) ```\r\n\t\r\n\t\r\n\tExample:\r\n\t```javascript\r\n\t// <div class='container' id='foo'>\r\n\t//\t\t<h4>Baz</h4>\r\n\t//\t\t<span>Qux</span>\r\n\t// </div>\r\n\t\r\n\t$('.container')\r\n\t\t.eq_('length', 1)\r\n\t\t.eq_('attr', 'id', 'foo')\r\n\t\t.eq_('hasClass', 'container', true)\r\n\t\t\r\n\t\t.children()\r\n\t\t.eq_('length', 2)\r\n\t\t.has_('html', 'span')\r\n\t\t\r\n\t\t.filter('h4')\r\n\t\t.eq_('length', 1)\r\n\t\t.eq_('text', 'Baz')\r\n\t\t;\r\n\t\t\r\n\t$('.container')\r\n\t\t.has_('h4')\r\n\t\t.hasNot_('h1')\r\n\t\t;\r\n\t```\r\n\t\r\n\r\n- Assert callbacks calls\r\n\r\n\t- `await`\r\n\t\r\n\t\t_**Wait for a callback**_\r\n\t\t\r\n\t\tCreates a wrapper function to ensure that the function is called.\r\n\t\t```javascript\r\n\t\t\t// ! Arguments order does not matter\r\n\t\t\tvar fn = assert.await(\r\n\t\t\t\tString   /* optional - name of this wrapper*/\r\n\t\t\t\tFunction /* optional - wrap the function*/,\r\n\t\t\t\tObject   /* optional - use binded context*/,\r\n\t\t\t\tNumber   /* optional - expectation count, default is `1`*/\r\n\t\t\t);\r\n\t\t\t\r\n\t\t\t// creates item in assert.callbacks\r\n\t\t\t[\r\n\t\t\t\t{\r\n\t\t\t\t\tname: String,\r\n\t\t\t\t\terror: Error, // to receive the stack trace\r\n\t\t\t\t\tcount: Number\r\n\t\t\t\t}\r\n\t\t\t];\r\n\t\t\t\r\n\t\t\t// after the `fn` function is called `count` times, then the object is removed\r\n\t\t\t// from the callbacks set\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t// Example\r\n\t\t\tvar fn = assert.await();\r\n\t\t\tassert.callbacks.length === 1;\r\n\t\t\ttry {\r\n\t\t\t\tthrow new Error()\r\n\t\t\t} catch {\r\n\t\t\t\tfn();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tassert.callbacks.length === 0;\r\n\t\t\t\r\n\t\t```\r\n\t- `avoid`\r\n\t\r\n\t\t_Unexpect more then N function calls_\r\n\t\t```javascript\r\n\t\t// ! Arguments order does not matter\r\n\t\tvar fn = assert.avoid(\r\n\t\t\tString   /* optional - name of this wrapper*/\r\n\t\t\tFunction /* optional - wrap the function*/,\r\n\t\t\tObject   /* optional - use binded context*/,\r\n\t\t\tNumber   /* optional - amount of allowed calls, default is `0`*/\r\n\t\t);\r\n\t\t\r\n\t\tfooDfr()\r\n\t\t\t.fail(assert.avoid())\r\n\t\t\t.done(function(){\r\n\t\t\t\t// ..\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\r\n\t\t```\r\n\t\r\n- Listener\r\n\t\r\n\tYou can attach listener to the assertions.\r\n\tEvent Types:\r\n\t- start\r\n\t- fail\r\n\t\t> if `fail` type listener is attached, then exceptions are not thrown.\r\n\t- success\r\n\t\r\n\t```javascript\r\n\t// sample\r\n\tassert.on('fail', function(error){\r\n\t\terror instanceof assert.AssertionError;\r\n\t});\r\n\t```\r\n",
  "readmeFilename": "readme.md",
  "_id": "assertion@0.100.5",
  "_from": "assertion@latest"
}
