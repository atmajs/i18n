{
  "name": "atma-utest",
  "description": "TDD-Plugin for the Atma Toolkit",
  "author": {
    "name": "Alexander Kit",
    "email": "alex.kit@atmajs.com"
  },
  "version": "0.8.43",
  "devDependencies": {
    "atma": ">0.9.27",
    "atma-utest": ">0.0.0"
  },
  "dependencies": {
    "socket.io-client": "~0.9.11",
    "assertion": "latest",
    "connect": "latest"
  },
  "atma": {
    "plugins": [
      "atma-utest"
    ]
  },
  "scripts": {
    "test": "node_modules/.bin/atma test UTest"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/tenbits/atma-utest.git"
  },
  "license": "MIT",
  "readme": "µTEST\r\n----\r\n[![Build Status](https://travis-ci.org/atmajs/utest.png?branch=master)](https://travis-ci.org/atmajs/utest)\r\n\r\n_TDD and Unit Testing plugin for Atma.Toolkit_\r\n\r\n- [Overview](#overview)\r\n- [Simplest example](#simplest-example)\r\n- [Assertions](#assertions)\r\n- [UTest Class](#utest-class)\r\n\t- [http](#utest-server)\r\n- [Config](#config)\r\n- [CLI Sugar](#cli-sugar)\r\n- [ES6](#es6)\r\n- [Simplest CommonJS test](#simplest-commonjs-test)\r\n- [Screenshot](#screenshot)\r\n\r\n##### Install\r\n```$ npm install atma -g```\r\n\r\n\r\nCreate Tests. Covers all use cases - from most simple test to complex-application test.\r\n\r\n##### Overview\r\n\r\n- **Node.js**-runner  ` $ atma test foo `.\r\n- **Browser**-runner  \r\n\t- with `atma` you create a test server (` $ atma server `), open a test-runner-page in one or many browsers (` http://localhost:5777/utest/ `), _so slaves are captured by the server_. And you are ready to run your scripts in dom environment ` $ atma test foo -browser `\r\n\t- UPD: (up from v.8.14) if the server is not running, uTest starts the server, launches the system default browser, navigates to the slave capture url and resumes the runner.\r\n- **Watcher**       ` -watch ` flag allows atma test instance not to be closed after testing, but waiting for any changes in files, that were used in unit tests and all its includejs dependencies.\r\n- **Environments** By default,  there will be available additional libraries in all tests\r\n\t\r\n\t- [IncludeJS](https://github.com/atmajs/IncludeJS)\r\n\t- [MaskJS](https://github.com/atmajs/MaskJS)\r\n\t- [ClassJS](https://github.com/atmajs/ClassJS)\r\n\t- [IO](https://github.com/atmajs/atma-io)\r\n\t- [Logger](https://github.com/atmajs/atma-logger)\r\n\t- jQuery\r\n\t- SinonJS\r\n\t\r\n- **Test Suites**   though this testing system does not require from developer to define test suites, as from example below, but with this class, developer can define test suites more properly\r\n- **Pages**         Load and Test webpages\r\n- **Configs**       configurations for more complex projects\r\n- Why not to use headless browser testrunner, like PhantomJS? `Server-Slave` pattern has much more advantages:\r\n\t- Launch slave url in any browser - Chrome, IE(9+), Opera, Mozilla. _PhantomJS is only webkit based._\r\n\t- Much better debugging. Use browsers developer tools to set breakpoints in your tests and assertions.\r\n\r\nDefault test extension: `*.test*`\r\n\r\n##### Simplest example\r\n```\r\n/myscript\r\n   app.js\r\n   app.test\r\n```\r\n_app.js_\r\n```javascript\r\nvar Application = { version: 1 };\r\n```\r\n_app.test_\r\n```javascript\r\neq(Application.version, 1); // alias for assert.equal()\r\n```\r\n\r\n> More Examples you can find in most [Atma.js Libraries](https://github.com/atmajs)\r\n\r\n- Node.js: \r\n\t```coffeescript\r\n\t\tcd myscript\r\n\t\tatma test app\r\n\t\t# OR atma test app -watch\r\n\t```\r\n- Browser:\r\n\t```coffeescript\r\n\t\tcd myscript\r\n\t\tatma test app -browser\r\n\t\t# OR atma test app -browser -watch\r\n\t```\r\n\r\nThis is the simpliest test case. \r\n> As those 2 files ` app.js/app.test ` are in the same directory, `app.js` will be preloaded when 'app.test' is started\r\n\r\n_app.test_\r\n```javascript\r\ninclude.inject('subfolder/app.js').done(function(){\r\n\teq(Application.version,1);\r\n})\r\n```\r\n\r\n- ```include.inject``` - matters only in nodejs test runner. As ```include.js``` is like require() - scripts are evaluated in there module scope, so Application object will be not available in our test, but ```inject``` forces script to be evaluated in the same context/scope as the unit tests one.\r\n\r\n\r\n##### Assertions\r\n\r\nEmbedded Assertion Library - [Documentation](https://github.com/atmajs/assertion).\r\n\r\nQuick overview (note the global aliases and jQuery assertions for browser tests):\r\n\r\n```javascript\r\n  assert.equal(arg1, arg2, ?message);\r\n  // eq_\r\n  \r\n  assert.notEqual\r\n  // notEq_\r\n\r\n  assert.strictEqual\r\n  // strictEq_\r\n\r\n  assert.notStrictEqual\r\n  // notStrictEq_\r\n\r\n  assert.deepEq\r\n  // deepEq_\r\n\r\n  assert.notDeepEq\r\n  // notDeepEq_\r\n\r\n  assert.has\r\n  // has_\r\n  \r\n  assert.hasNot\r\n  // hasNot_\r\n  \r\n  assert.is\r\n  // is_\r\n  assert.isNot\r\n  // isNot_\r\n  \r\n  assert.await(Function, name)\r\n  \r\n  $.fn.has_\r\n  $.fn.hasNot_\r\n  $.fn.eq_\r\n  $.fn.notEq_\r\n  $.fn.deepEq_\r\n  $.fn.notDeepEq_\r\n  $.fn.is_\r\n  $.fn.isNot_\r\n  \r\n```\r\n\r\n##### UTest Class\r\n\r\n```javascript\r\nUTest({\r\n\t'check object': function(){\r\n\t\tvar A = function(){this.letter = 'A'};\r\n\t\t\r\n\t\tassert.deepEqual({letter: 'A'}, new A);\r\n\t},\r\n\t\r\n\t'async test': function(done){\r\n\t\t$.get('/rest/request').then(function(response){\r\n\t\t\tassert.equal(response, 'foo');\r\n\t\t\tdone();\r\n\t\t})\r\n\t},\r\n\t\r\n\t'$before': function(){\r\n\t\t// function is called before tests cases are run\r\n\t\t// (supports async call - use done as first argument)\r\n\t},\r\n\t'$teardown': function(){\r\n\t\t// function is called after each test case\r\n\t\t// (supports async call)\r\n\t},\r\n\t\r\n\t'$after': function(){\r\n\t\t// function is called after all test cases from\r\n\t\t// this particular Utest instance are completed\r\n\t}\r\n});\r\n```\r\n\r\n##### UTest server\r\n\r\n- load any web page\r\n\t\r\n\t```javascript\r\n\tUTest\r\n\t\t.server\r\n\t\t.request(url [, method, bodyArgs], callback);\r\n\t\t\r\n\tUTest({\r\n\t\t'google has input': function(done){\r\n\t\t\tUTest\r\n\t\t\t\t.server\r\n\t\t\t\t.request('http://google.com', function(error, document, window){\r\n\t\t\t\t\teq_(error, null);\r\n\t\t\t\t\t\r\n\t\t\t\t\t$(document)\r\n\t\t\t\t\t\t.has_('input[type=\"text\"]');\r\n\t\t\t\t\tdone();\r\n\t\t\t\t})\r\n\t\t}\r\n\t});\r\n\t```\r\n\t\r\n- render MaskJS server-side\r\n\r\n\t```javascript\r\n\tUTest\r\n\t\t.server\r\n\t\t.render(template, model, callback);\r\n\t\t\r\n\tUTest({\r\n\t\t'render title': function(done){\r\n\t\t\tvar template = 'h4 > \"Hello, ~[name]\"',\r\n\t\t\t\tmodel = { name: 'World' };\r\n\t\t\tUTest\r\n\t\t\t\t.server\r\n\t\t\t\t.render(template, model, function(error, document, window){\r\n\t\t\t\t\t$(document)\r\n\t\t\t\t\t\t.has_('html', 'Hello, world');\r\n\t\t\t\t\t\t\r\n\t\t\t\t\tdone();\r\n\t\t\t\t})\r\n\t\t}\r\n\t});\r\n\t```\r\n\r\n##### Config\r\n\r\n```\r\n/app-project\r\n    /src\r\n        ...\r\n    /test\r\n        config.js\r\n        ...\r\n```\r\n\r\n```javascript\r\nmodule.exports = {\r\n\tsuites: {\r\n\t\t'suite name': {\r\n\t\t\texec: <String> 'node' | 'dom',\r\n\r\n\t\t\t// preloading scripts\r\n            // (path is relative to projects directory)\r\n\t\t\tenv: String | Array<String>,\r\n            \r\n            // path to tests, glob pattern is also supported\r\n            // e.g. test/**-node.test\r\n\t\t\ttests: String | Array<String>\r\n\t\t}\r\n\t}\r\n};\r\n```\r\n\r\n##### CLI Sugar\r\n- `atma test`\r\n\r\n\tLoad the configuration from `%CWD%/test/config.js` and run all tests and suites\r\n\r\n- `atma test foo`\r\n\r\n\tRun the test `%CWD%/test/foo.test`. If exists, the configuration will also be loaded and the `ENV` property for this path will be extracted to preload the required resources.\r\n\t\r\n\t```javascript\r\n\t// test/config.js\r\n\tmodule.exports = {\r\n\t\tsuites: {\r\n\t\t\tbaz: {\r\n\t\t\t\texec: 'dom',\r\n\t\t\t\tenv: 'lib/baz.js'\r\n\t\t\t\ttests: 'test/baz/**.test\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t```\r\n\t`atma test baz/quux` - run single file test and the `lib/baz.js` will be preloaded.\r\n\r\n- `atma test baz/**.test`\r\n\r\n\tRun files by glob matching\r\n\t\r\n- CLI flags\r\n\t- `-browser` runs a test in browser\r\n\t- `-node` runs a test in Node.js\r\n\t- `-watch` watches for file changes and reruns the tests\r\n\r\n##### ES6\r\nWrite your test using EcmaScript 6. This is possible due to [Google Traceur Compiler](https://github.com/google/traceur-compiler) and the [Atma.Toolkit Plugin](https://github.com/atmajs/atma-loader-traceur).\r\n\r\n**How to start?**\r\n\r\n- Install the plugin\r\n\t```bash\r\n\t$ atma plugin install atma-loader-traceur\r\n\t```\r\n- Specify `test` extension to be handled by the tracuer. Edit your `package.json` to have at least:\r\n\t```json\r\n\t{\r\n\t\t\"atma\": {\r\n\t\t\t\"settings\": {\r\n\t\t\t\t\"traceur-extension\": \"test\"\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t```\r\n**Sample**\r\n```es6\r\n// foo.test\r\nhas_(` foo-multiline-string `, /foo/);\r\n```\r\n```bash\r\n$ atma test foo.test\r\n```\r\n\r\n##### Simplest CommonJS test\r\nThe first possible solution to test CommonJS Modules is just to `require` them as usual in tests and perform some assertions.\r\nBut there is simpler approach to load it once for all tests with exporting the module's exports to the globals.\r\n```javascript\r\n// src/some.js\r\nmodule.exports = {\r\n\taddOne: function(n){\r\n\t\treturn n + 1;\r\n    }\t\r\n};\r\n```\r\n```javascript\r\n// test/mytest.test\r\neq(foo.addOne(1), 2);\r\n```\r\n\r\n```javascript\r\n// test/config.js\r\nmodule.exports = {\r\n\tenv: ['src/some.js::foo'],\r\n\ttests: 'test/*.test'\r\n};\r\n```\r\n\r\n```$ cd app-project```\r\n```$ atma test```\r\n\r\nHere was used alias-feature of the IncludeJS. So when 'some.js' is required, its exports object is then set to globals with alias var name. From the example - it was 'foo'.\r\n\r\n##### Screenshot\r\n\r\n![utest screenshot](https://github.com/atmajs/utest/raw/master/resources/screen.png)",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/tenbits/atma-utest/issues"
  },
  "homepage": "https://github.com/tenbits/atma-utest",
  "_id": "atma-utest@0.8.43",
  "_from": "atma-utest@>0.0.0"
}
