{
  "name": "atma-server",
  "description": "Server Application",
  "author": {
    "name": "Alexander Kit",
    "email": "alex.kit@atmajs.com"
  },
  "version": "0.0.90",
  "main": "./lib/server.js",
  "repository": {},
  "license": "MIT",
  "dependencies": {
    "atma-logger": "latest",
    "atma-io": "latest",
    "atma-libs": "latest",
    "appcfg": "latest",
    "coffee": "latest",
    "less": "latest",
    "yamljs": "latest",
    "socket.io": "latest"
  },
  "scripts": {
    "test": "node_modules/.bin/atma test"
  },
  "devDependencies": {
    "atma": "latest",
    "atma-loader-traceur": "latest",
    "mongodb": "latest",
    "connect": "latest"
  },
  "atma": {
    "settings": {
      "traceur-extension": [
        "es6",
        "test"
      ]
    }
  },
  "readme": "Atma Node.js Server Module\r\n----\r\n[![Build Status](https://travis-ci.org/atmajs/atma-server.svg?branch=master)](https://travis-ci.org/atmajs/atma-server)\r\n\r\n- [Overview](#overview)\r\n- [Configuration](#configuration)\r\n\t- [Resources](#resources)\r\n\t- [Routing](#routing)\r\n- [Endpoints](#endpoints)\r\n\t- [Handler](#handler)\r\n\t- [Service](#httpservice)\r\n\t\t- [Routes](#service-routes)\r\n\t\t- [Endpoints](#service-endpoints)\r\n\t\t- [Help & Validation](#meta---help--validation)\r\n\t\t- [Barricade](#barricades-middlewares)\r\n\t\t- [Example](#service-and-the-application-routing-example)\r\n\t- [Page](#httppage)\r\n\t\t- [Master View](#master-view)\r\n\t\t- [Page View](#page-view)\r\n\r\n## Overview\r\n_Can be used as a [Connect](http://www.senchalabs.org/connect/) Middleware_\r\n\r\nThis module uses:\r\n\r\n- [Atma.js libs](https://github.com/atmajs/atma.libs)\r\n- [atma.logger](https://github.com/atmajs/atma-logger)\r\n- [atma.io](https://github.com/atmajs/atma-io)\r\n- [appcfg](https://github.com/atmajs/appcfg)\r\n\r\nTo setup a bootstrap project use Atma.Toolkit - ``` $ atma gen server ```\r\n\r\n## Configuration\r\n[appcfg](https://github.com/atmajs/appcfg) module is used to load the configurations and routings. The default path is the ``` /server/config/**.yml ```.\r\n\r\nThe default configuration can be viewed here - [link](https://github.com/atmajs/atma-server/tree/master/src/ConfigDefaults)\r\n\r\n#### Resources\r\n_scripts / styles_ for the NodeJS application itself and for pages. They are defined in\r\n- `config/env/both.yml` - shared resources\r\n- `config/env/server.yml` - resources for the nodejs application, e.g. server side components paths.\r\n- `config/env/client.yml` - resources, that should be loaded on the client.\r\n\t\r\n\tIn the DEV Mode all client-side scripts/styles/components are served to browsers without concatenation.\r\n\tFor the production compile resources with `atma custom node_modules/atma-server/tools/compile`\r\n\t\r\n- Define scripts and styles for a particular page only _in page routing_.\r\n\r\n#### Routing\r\n\r\n- **handlers** ` config/handlers.yml `\r\n\t```yml\r\n\thandler:\r\n\t\tlocation: /server/http/handler/{0}.js\r\n\t\t#< default\r\n\thandlers:\r\n\t\t# route - resource that exports a HttpHandler\r\n\t\t'/foo': 'baz'\r\n\t\t\t# path is '/server/http/handler/baz.js'\r\n\t\t\t# method is '*'\r\n\t\t\r\n\t\t'$post /qux': 'qux/postHandler'\r\n\t\t\t# path is '/server/http/handler/quz/postHander.js'\r\n\t\t\t# method is 'POST'\r\n\t```\r\n\r\n- **services** ` config/services.yml `\r\n\t```yml\r\n\tservice:\r\n\t\tlocation: /server/http/service/{0}.js\r\n\t\t#< default\r\n\tservices:\r\n\t\t# route - resource that exports a HttpService @see HttpService\r\n\t\t'/user': 'User'\r\n\t\t\t# path is '/server/http/service/User.js'\r\n\t\t\t# method is '*'\r\n\t\t\t# futher routing is handled by the service, like '/user/:id'\r\n\t```\r\n- **pages** ` config/pages.yml `\r\n\t```yml\r\n\tpage:\r\n\t\t# see default config to see the default page paths\r\n\t\r\n\tpages:\r\n\t\t# route - Page Definition\r\n\t\t\r\n\t\t/:\r\n\t\t\tid: index #optional, or is generated from the route\r\n\t\t\t\t\r\n\t\t\ttemplate: quz #optional, or is equal to `id`\r\n\t\t\t\t# path is `/server/http/page/quz/quz.mask\r\n\t\t\tmaster: simple #optional, or is `default`\r\n\t\t\t\t# path is `/server/http/master/simple.mask`\r\n\t\t\t\r\n\t\t\t# optional\r\n\t\t\tsecure:\r\n\t\t\t\t# optional, default - any logged in user\r\n\t\t\t\trole: 'admin'\r\n\t\t\t\r\n\t\t\tscripts:\r\n\t\t\t\t# scripts for the page\r\n\t\t\tstyles:\r\n\t\t\t\t# styles for the page\r\n\t\t\t\r\n\t\t\t# any other data, which then is accessable via javascript or mask\r\n\t\t\t# `ctx.page.data.title`\r\n\t\t\ttitle: String\r\n\t```\r\n\t\r\n## Endpoints\r\n\r\nThere are 3 types of endpoints:\r\n\r\n- [Handler (generic handler)](#handler)\r\n- [HttpService (RESTful service)](#httpservice)\r\n- [HttpPage](#httppage)\r\n\r\n### Handler\r\n\r\nTo declare a Handler is as simple as to define a Class/Constructor with Deferred(_Promise_) Interface and `process` function in prototypes, like this\r\n\r\n```javascript\r\n// server/http/handler/hello.js\r\nmodule.exports = Class({\r\n\tBase: Class.Deferred,\r\n\tprocess: function(req, res){\r\n\t\tthis.resolve(\r\n\t\t\tdata String | Object | Buffer,\r\n\t\t\t?statusCode Number,\r\n\t\t\t?mimeType String,\r\n\t\t\t?headers Object\r\n\t\t);\r\n\t\tthis.reject(error)\r\n\t}\r\n});\r\n```\r\n\r\nTo bind for a route(`server/config/handlers.yml`):\r\n```yml\r\nhandler:\r\n\tlocation: '/server/http/handler/{0}.js'\r\n\t# <- default\r\nhandlers:\r\n\t'/say/hello': Hello\r\n\t'(\\.less(\\.map)?$)': LessHandler\r\n\t'(\\.es6(\\.map)?$)': TraceurHandler\r\n```\r\n\r\nHandler is the first endpoint that will be looked for by the responder.\r\nUsually, this are the low level handlers, like 'less' preprocessor. \r\nBut the interface ``` (Deferred + process(req, res)) ``` is same also for HttpService and HttpPage\r\n\r\n\r\n### HttpService\r\n\r\n##### Service routes\r\nFor route docs refer to [RutaJS](http://github.com/atmajs/ruta)\r\n\r\nSample:\r\n```javascript\r\nmodule.exports = atma.server.HttpService({\r\n\t'$get /': Function | Endpoint\r\n\t'$post /': ...\r\n\t'$get /:name(foo|bar|qux)': ...\r\n\t'$put /user': ...\r\n})\r\n```\r\n\r\n##### Service endpoints\r\n###### Function\r\n\r\n```javascript\r\natma.server.HttpService(/* endpoints */ {\r\n\t// route - handler\r\n\t'route': function(req, res, params){\r\n\t\tthis.resolve(/* @see Handler */);\r\n\t\tthis.reject(...);\r\n\t},\r\n\t\r\n\t'route': {\r\n\t\tprocess: function(){ ... }\r\n\t}\r\n})\r\n```\r\n\r\n###### Meta - help & validation\r\n - **help** - list all endpoints of a service with there meta information. `http://127.0.0.1/rest/user?help`\r\n - **validation** - when sending data with `post`/`put`, httpservice will validate it before processing\r\n\t```javascript\r\n\tatma.server.HttpService({\r\n\t\troute: {\r\n\t\t\tmeta {\r\n\t\t\t\tdescription: 'Lorem...',\r\n\t\t\t\targuments: {\r\n\t\t\t\t\t// required, not empty string\r\n\t\t\t\t\tfoo: 'string',\r\n\t\t\t\t\t// required, validate with regexp\r\n\t\t\t\t\tage: /^\\d+$/,\r\n\t\t\t\t\t\r\n\t\t\t\t\t// optional, of type 'number'\r\n\t\t\t\t\t'?baz': 'number',\r\n\t\t\t\t\t\r\n\t\t\t\t\t// unexpect\r\n\t\t\t\t\t'-quz': null,\r\n\t\t\t\t\t\r\n\t\t\t\t\t// validate subobject\r\n\t\t\t\t\tjokers: {\r\n\t\t\t\t\t\tleft: 'number',\r\n\t\t\t\t\t\tright: 'number'\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\r\n\t\t\t\t\t// validate arrays\r\n\t\t\t\t\tcollection: [ {_id: 'string', username: 'string'} ]\r\n\t\t\t\t},\r\n\t\t\t\tresponse: {\r\n\t\t\t\t\tbaz: 'string',\r\n\t\t\t\t\t...\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tprocess: function(req, res, params) { ... }\r\n\t\t}\r\n\t})\r\n\t```\r\n\r\n###### Barricades (_Middlewares_)\r\n```javascript\r\natma.server.HttpService({\r\n\t// route - Barricade (Middleware pattern)\r\n\troute: [\r\n\t\tfunction(req, res, params, next){\r\n\t\t\t// error example\r\n\t\t\tif (req.body.name == null){\r\n\t\t\t\tnext('Name argument expected');\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// continue\r\n\t\t\treq.name = req.body.name;\r\n\t\t\tnext();\r\n\t\t\t\r\n\t\t\t// stop processing\r\n\t\t\tthis.resolve(...);\r\n\t\t\tthis.reject(...);\r\n\t\t},\r\n\t\tfunction(req, res, params, next){\r\n\t\t\t...\r\n\t\t},\r\n\t\t...\r\n\t],\r\n\t\r\n\t// same with `help`\r\n\troute: {\r\n\t\thelp: { ... }\r\n\t\tprocess: [\r\n\t\t\tfooFunction,\r\n\t\t\tbazFunction,\r\n\t\t\t...\r\n\t\t]\r\n\t}\r\n})\r\n```\r\n\r\n##### Service and the application routing example \r\n\r\n```javascript\r\n// server/http/service/time.js\r\nmodule.exports = atma.server.HttpService({\r\n\t'/': function(req, res){\r\n\t\tthis.resolve('This is a time service');\r\n\t},\r\n\t'/:transport(console|file|client)': function(req, res, params){\r\n\t\tvar time = new Date().toString(),\r\n\t\t\tthat = this;\r\n\t\tswitch(params.transport){\r\n\t\t\tcase 'console':\r\n\t\t\t\tconsole.log(' > time', time);\r\n\t\t\t\tthis.resolve('Pushed to console');\r\n\t\t\t\treturn;\r\n\t\t\tcase 'file':\r\n\t\t\t\tvar that = this;\r\n\t\t\t\tfs.write('someFile.txt', time, function(error){\r\n\t\t\t\t\tif (error) return that.reject(error);\r\n\t\t\t\t\tthat.resolve('Saved to file');\r\n\t\t\t\t});\r\n\t\t\t\treturn;\r\n\t\t\tcase 'client':\r\n\t\t\t\tthis.resolve(time);\r\n\t\t\t\treturn;\r\n\t\t}\r\n\t}\r\n})\r\n```\r\n\r\n```yml\r\n# server/config/services.yml\r\n\r\nservice:\r\n\tlocation: /server/http/service/{0}.js'\r\n\t# <- default\r\n\r\nservices:\r\n\t'/time': time\r\n```\r\n\r\n\r\n### HttpPage\r\n\r\nHttpPage consists of 3 parts\r\n\r\n- Controller\r\n- Master View Template\r\n- View Template\r\n\r\nYou would rare redefine the default controller, as each Page should consist of a component composition,\r\nso that the logic could be moved to each component. We wont explain what a component is, as you should refer to [MaskJS](https://github.com/atmajs/mask) and [MaskJS.Node](https://github.com/atmajs/mask-node)\r\nSome things we remind:\r\n\r\n- **Context**\r\n\t```javascript\r\n\t{ req: <Request>, res: <Response>, page: <HttpPage (current instance)> }\r\n\t```\r\n- **Render-mode**\r\n\t- ```javascript\r\n\t\tmode: 'server' | 'client' | 'both' // @default is 'both'\r\n\t\tmodeModel: 'server' // if `server` is defined, the model wont be serialized\r\n\t```\r\n- **Cache**\r\n\tEach components output could be cached and the conditions could be defined.\r\n\t- `byProperty`: For each unique value from model or ct\r\n\r\n_Example_\r\n```javascript\r\nmask.registerHandler(':requestedUrl', Compo({\r\n\tmode: 'server:all'\r\n\tmodelMode: 'server:all'\r\n\tcache: {\r\n\t\tbyProperty: 'ctx.req.url'\r\n\t},\r\n\r\n\tonRenderStart: function(model, ctx){\r\n\t\tthis.nodes = jmask('h4').text(ctx.req.url);\r\n\t}\r\n}))\r\n```\r\n\r\nGoing back to the HttpPage, lets start from a master view template\r\n\r\n#### Master View\r\n\r\nRefer to the [layout component](http://atmajs.com/compo/layout)\r\n\r\nExample:\r\n```sass\r\n// server/http/master/default.mask\r\nlayout:master #default {\r\n\t:document {\r\n\t\t\r\n\t\thead {\r\n\t\t\tmeta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\";\r\n\t\t\tmeta name=\"viewport\" content=\"maximum-scale=1.5, minimum-scale=.8, initial-scale=1, user-scalable=1\";\r\n\t\t\ttitle > \"Atma.js\"\r\n\r\n\t\t\tatma:styles;\r\n\t\t}\r\n\t\tbody {\r\n\t\t\t\r\n\t\t\t@placeholder #body;\r\n\t\t\t\r\n\t\t\tatma:scripts;\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\n\r\n#### Page View\r\n\r\n```sass\r\n// server/http/page/hello.mask\r\nlayout:view master=default {\r\n\t@content #body {\r\n\t\t'Hello World'\r\n\t}\r\n}\r\n```\r\n\r\nThe routing is also made via the configuration files\r\n\r\n```yml\r\n# server/config/pages.yml\r\n\r\npages: \r\n\t'/hello': \r\n\t\tid: hello\r\n```\r\n\r\n\r\n----\r\n(c) 2014 MIT\r\n",
  "readmeFilename": "readme.md",
  "_id": "atma-server@0.0.90",
  "_from": "atma-server@>0.0.0"
}
