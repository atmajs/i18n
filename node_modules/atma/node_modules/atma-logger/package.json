{
  "name": "atma-logger",
  "description": "Logger | Formatter + Color",
  "author": {
    "name": "Alexander Kit",
    "email": "alex.kit@atmajs.com"
  },
  "version": "0.0.82",
  "main": "./lib/logger.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/atmajs/atma-logger.git"
  },
  "keywords": [
    "logger",
    "file",
    "console"
  ],
  "license": "MIT",
  "dependencies": {
    "atma-formatter": "latest"
  },
  "devDependencies": {
    "atma": "latest"
  },
  "scripts": {
    "test": "node_modules/.bin/atma test"
  },
  "readme": "NodeJS Logger\r\n----\r\n[![Build Status](https://travis-ci.org/atmajs/atma-logger.svg?branch=master)](https://travis-ci.org/atmajs/atma-logger)\r\n[![NPM version](https://badge.fury.io/js/atma-logger.svg)](http://badge.fury.io/js/atma-logger)\r\n\r\nFeatures:\r\n\r\n- string colors: ascii and html\r\n- object formatters _handles circular refs_\r\n- object color theme\r\n- `std` and `fs` transports\r\n- `fs` with `stdout/stderr` interceptors\r\n\r\n----\r\n\r\n- [Library](#library)\r\n- [Logger](#logger)\r\n- [Config](#config)\r\n    - [Log Levels](#log-levels)\r\n    - [Transports](#transports)\r\n        - [Std](#std)\r\n        - [File System](#file-system)\r\n- [Color](#color)\r\n\r\n### Library\r\n```bash\r\n$ npm i atma-logger -save\r\n```\r\n```javascript\r\n// CommonJS Module\r\nvar logger = require('atma-logger'); /*minified*/\r\nvar logger = require('atma-logger/lib/logger-dev'); /*not minified*/\r\n\r\n// Exports to `global`\r\nrequire('atma-logger/lib/global'); /*minified*/\r\nrequire('atma-logger/lib/global-dev'); /*not minified*/\r\n    ...\r\n    logger.trace(global);\r\n```\r\n\r\n### Logger\r\n\r\n```javascript\r\n// chainable\r\n\r\n/*\r\n * Logger scope functions\r\n\\*/\r\nlogger\r\n    .log('lorem \"%s\"', 'ipsum');\r\n    .trace(...)\r\n    .debug(...)\r\n    .warn(...)\r\n    .error(...)\r\n    ;\r\n\r\n/*\r\n * Instance scope functions\r\n * <Number> - log level (redefines log level) (@see functions log level)\r\n * <String> - scope name (@see `levels` in configuration)\r\n\\*/\r\nlogger(String|Number, String|Number) \r\n    .log\r\n    .warn\r\n    .error\r\n    .trace\r\n    .debug\r\n    ;\r\n```\r\n\r\n\r\n### Config\r\n\r\n```javascript\r\nlogger.cfg(key, value);\r\nlogger.cfg(CfgObject); // {key: value, ...}\r\n\r\nCfgObject = {\r\n    level: Number,\r\n    levels: Object,\r\n    color: 'none|ascii|html', // @def: ascii\r\n\t\r\n\t// include filename and the linenumber\r\n    logCaller: Boolean, // @def: true\r\n    \r\n\t// flush error and exit the process.\r\n\thandleExceptions: Boolean, // @def, false\r\n\t\r\n    // 'dd-MM hh:mm', date format pattern, @def: null\r\n    logDate: String,\r\n    \r\n    transport: TransportObject\r\n}\r\n```\r\n\r\n#### Log Levels\r\n\r\nLogger performs prints only, if current level is smaller than loggers level or per instance level. Default level is `50`. \r\n\r\n```javascript\r\n/*\r\n * Define the log levels\r\n\\*/\r\nlogger.cfg({\r\n    // logger level\r\n    level: 64\r\n    // named scope levels\r\n    levels: {\r\n        'userService': 100\r\n    }\r\n})\r\n\r\n/*\r\n * Functions required log level\r\n\\*/\r\n.trace(...) -> level_TRACE = 100\r\n.debug(...) -> level_DEBUG = 75\r\n.log  (...) -> level_LOG = 50\r\n.warn (...) -> level_WARN = 25\r\n.error(...) -> level_ERROR = 0\r\n\r\n/*\r\n * Instance loglevel redefines the functions one\r\n\\*/\r\nlogger(30).log().error() ...\r\n// log level minimum `30` is required\r\n\r\n\r\n/*\r\n * Named scope instance\r\n\\*/\r\nvar log = logger('userService');\r\n\r\n// prints\r\nlog('baz') //same as log.log('baz');\r\nlog.debug('baz');\r\n```\r\n\r\n\r\n\r\n#### Transports\r\n\r\n##### Std\r\nPrint logs to the console\r\n```javascript\r\nSTD_TransportObject = {\r\n    type: 'std'\r\n};\r\n```\r\n\r\n##### File System\r\nAsync file-system transport with buffering. \r\n```javascript \r\nFS_TransportObject = {\r\n    type: 'fs',\r\n    \r\n    // defaults\r\n    extension: 'txt', \r\n    directory: 'logs', \r\n    bufferSize: 64,\r\n    fileSize: 500 * 1024 * 1024,\r\n    filesCount: 10,\r\n    sync: false,\r\n    \r\n    // when set to `true` then all std writes, like - console.log,\r\n    // will be also written to the file system.\r\n    interceptStd: false\r\n};\r\n```\r\n\r\n\r\n### Color\r\n```javascript\r\n\r\n    'lorem ipsum'\r\n        .red\r\n\t\t.green\r\n\t\t.yellow\r\n\t\t.blue\r\n\t\t.magenta\r\n\t\t.cyan\r\n\t\t\r\n\t\t.bold\r\n\t\t.italic\r\n\t\t.underline\r\n\t\t.inverse\r\n        ;\r\n\r\n    'green<bold<lorem> ipsum>'.color\r\n```\r\n\r\n\r\n----\r\nÂ© MIT\r\n  Atma.js Project",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/atmajs/atma-logger/issues"
  },
  "homepage": "https://github.com/atmajs/atma-logger",
  "_id": "atma-logger@0.0.82",
  "_from": "atma-logger@>0.0.55"
}
